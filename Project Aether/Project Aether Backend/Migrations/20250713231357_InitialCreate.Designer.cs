// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project_Aether_Backend.Data;

#nullable disable

namespace Project_Aether_Backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250713231357_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjectAether.Objects.Net._2._1.Standard.Models.ArchetypeDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarImageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BaseAgility")
                        .HasColumnType("int");

                    b.Property<int>("BaseCharisma")
                        .HasColumnType("int");

                    b.Property<int>("BaseDefense")
                        .HasColumnType("int");

                    b.Property<int>("BaseDodge")
                        .HasColumnType("int");

                    b.Property<int>("BaseHealth")
                        .HasColumnType("int");

                    b.Property<int>("BaseIntelligence")
                        .HasColumnType("int");

                    b.Property<int>("BaseIntuition")
                        .HasColumnType("int");

                    b.Property<int>("BaseLuck")
                        .HasColumnType("int");

                    b.Property<int>("BaseMana")
                        .HasColumnType("int");

                    b.Property<int>("BaseSpeed")
                        .HasColumnType("int");

                    b.Property<int>("BaseStrength")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("StartingAbilities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("StartingEquipment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StoreItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreItemId")
                        .IsUnique()
                        .HasFilter("[StoreItemId] IS NOT NULL");

                    b.ToTable("Archetypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvatarImageId = "",
                            BaseAgility = 0,
                            BaseCharisma = 0,
                            BaseDefense = 0,
                            BaseDodge = 0,
                            BaseHealth = 0,
                            BaseIntelligence = 0,
                            BaseIntuition = 0,
                            BaseLuck = 0,
                            BaseMana = 0,
                            BaseSpeed = 0,
                            BaseStrength = 0,
                            Description = "Grew up in the forgotten, grimy industrial districts where old steampunk machinery and early Magic-Theory tech from the 80s/90s era still clunk along. You learned to fix things with a wrench and a basic understanding of Aetheric circuits.",
                            Name = "Streetwise Arcane Mechanic",
                            StartingAbilities = "[\"Basic Alchemy\",\"Arcane Mechanics\"]",
                            StartingEquipment = "[\"a \\u0027Boombox Golem\\u0027 blueprint\",\"a \\u0027CRT Scrying Monitor\\u0027 schematics\"]"
                        },
                        new
                        {
                            Id = 2,
                            AvatarImageId = "",
                            BaseAgility = 0,
                            BaseCharisma = 0,
                            BaseDefense = 0,
                            BaseDodge = 0,
                            BaseHealth = 0,
                            BaseIntelligence = 0,
                            BaseIntuition = 0,
                            BaseLuck = 0,
                            BaseMana = 0,
                            BaseSpeed = 0,
                            BaseStrength = 0,
                            Description = "Hailing from a powerful, Magic-Theory corporate family that builds the city's sleek, modern infrastructure. You were trained in cutting-edge Magic-Theory but were recently exiled or discredited due to a scandalous project failure (perhaps an early encounter with the Static Cascade).",
                            Name = "Corporate Scion / Disgraced Magitech Engineer",
                            StartingAbilities = "[]",
                            StartingEquipment = "[]"
                        },
                        new
                        {
                            Id = 3,
                            AvatarImageId = "",
                            BaseAgility = 0,
                            BaseCharisma = 0,
                            BaseDefense = 0,
                            BaseDodge = 0,
                            BaseHealth = 0,
                            BaseIntelligence = 0,
                            BaseIntuition = 0,
                            BaseLuck = 0,
                            BaseMana = 0,
                            BaseSpeed = 0,
                            BaseStrength = 0,
                            Description = "Came to the metropolis from the untamed 'Wilds' – pockets of ancient, primeval fantasy landscapes that exist just beyond or hidden within the city's boundaries. You have a deeper connection to raw Aether and elemental spirits.",
                            Name = "Aether-Touched Outlander",
                            StartingAbilities = "[]",
                            StartingEquipment = "[]"
                        },
                        new
                        {
                            Id = 4,
                            AvatarImageId = "",
                            BaseAgility = 0,
                            BaseCharisma = 0,
                            BaseDefense = 0,
                            BaseDodge = 0,
                            BaseHealth = 0,
                            BaseIntelligence = 0,
                            BaseIntuition = 0,
                            BaseLuck = 0,
                            BaseMana = 0,
                            BaseSpeed = 0,
                            BaseStrength = 0,
                            Description = "Grew up immersed in the underground subcultures that celebrate the 80s/90s aesthetic – from synth-wave musical guilds to grunge alchemist collectives. You're known for your unique alchemical mixes and your connection to the street art scene.",
                            Name = "Arcade Alchemist / Subculture Guru",
                            StartingAbilities = "[]",
                            StartingEquipment = "[]"
                        },
                        new
                        {
                            Id = 5,
                            AvatarImageId = "",
                            BaseAgility = 0,
                            BaseCharisma = 0,
                            BaseDefense = 0,
                            BaseDodge = 0,
                            BaseHealth = 100,
                            BaseIntelligence = 0,
                            BaseIntuition = 0,
                            BaseLuck = 0,
                            BaseMana = 30,
                            BaseSpeed = 0,
                            BaseStrength = 0,
                            Description = "You were once part of a city-sanctioned Magical Response Unit (MRU) or a private security firm, trained in close-quarters Aether-combat and the tactical application of Magic-Theory weaponry. You're disciplined and practical, but a past incident involving Static Cascade interference (or perhaps the MRU's rigid methods) led to your discharge or disillusionment",
                            Name = "Arcane Enforcer",
                            StartingAbilities = "[\"Basic Melee Attack\",\"Shield Bash\"]",
                            StartingEquipment = "[]"
                        },
                        new
                        {
                            Id = 6,
                            AvatarImageId = "",
                            BaseAgility = 0,
                            BaseCharisma = 0,
                            BaseDefense = 0,
                            BaseDodge = 0,
                            BaseHealth = 0,
                            BaseIntelligence = 0,
                            BaseIntuition = 0,
                            BaseLuck = 0,
                            BaseMana = 0,
                            BaseSpeed = 0,
                            BaseStrength = 0,
                            Description = "You thrive in the underbelly of the city, using your unique blend of Aetheric manipulation and understanding of Magic-Theory vulnerabilities to bypass magical security systems, hack into enchanted networks(the \"Nether-Net\"), or acquire rare alchemical components.You're nimble, stealthy, and prefer to work in the shadows.",
                            Name = "Net-Dancer / Aetheric Infiltrator",
                            StartingAbilities = "[]",
                            StartingEquipment = "[]"
                        },
                        new
                        {
                            Id = 7,
                            AvatarImageId = "",
                            BaseAgility = 0,
                            BaseCharisma = 0,
                            BaseDefense = 0,
                            BaseDodge = 0,
                            BaseHealth = 0,
                            BaseIntelligence = 0,
                            BaseIntuition = 0,
                            BaseLuck = 0,
                            BaseMana = 0,
                            BaseSpeed = 0,
                            BaseStrength = 0,
                            Description = "You possess a rare form of Aetheric divination, allowing you to read the subtle currents and \"fate echoes\" of the city through methods like Arcane Tarot, Scrying Pool reflections, or Aether-charged crystal balls.You see glimpses of possible futures and past events, making you an invaluable, albeit cryptic, source of information.The Static Cascade is making your readings chaotic and dangerous.",
                            Name = "Urban Soothsayer / Resonance Reader",
                            StartingAbilities = "[]",
                            StartingEquipment = "[]"
                        },
                        new
                        {
                            Id = 8,
                            AvatarImageId = "",
                            BaseAgility = 0,
                            BaseCharisma = 0,
                            BaseDefense = 0,
                            BaseDodge = 0,
                            BaseHealth = 0,
                            BaseIntelligence = 0,
                            BaseIntuition = 0,
                            BaseLuck = 0,
                            BaseMana = 0,
                            BaseSpeed = 0,
                            BaseStrength = 0,
                            Description = "You are attuned to the more spiritual side of the city's Magic-Theory, capable of communing with benevolent urban spirits, ancient elemental guardians, or the very \"soul\" of the metropolis itself. You use your connection to mend, heal, and restore, but the Static Cascade is disrupting these vital connections.",
                            Name = "Spirit Channeler / Aetheric Empath",
                            StartingAbilities = "[]",
                            StartingEquipment = "[]"
                        },
                        new
                        {
                            Id = 9,
                            AvatarImageId = "",
                            BaseAgility = 0,
                            BaseCharisma = 0,
                            BaseDefense = 0,
                            BaseDodge = 0,
                            BaseHealth = 0,
                            BaseIntelligence = 0,
                            BaseIntuition = 0,
                            BaseLuck = 0,
                            BaseMana = 0,
                            BaseSpeed = 0,
                            BaseStrength = 0,
                            Description = "You've honed your body and mind to channel raw Aetheric energy through precise movements and martial arts techniques, turning your fists and feet into conduits of magical force. You might belong to an underground dojo hidden in a renovated 80s gym, where ancient techniques are taught alongside modern interpretations of Magic-Theory. The Static Cascade tests your control, making your powers unpredictable.",
                            Name = "Urban Mystic / Aether-Prowler",
                            StartingAbilities = "[]",
                            StartingEquipment = "[]"
                        },
                        new
                        {
                            Id = 10,
                            AvatarImageId = "",
                            BaseAgility = 0,
                            BaseCharisma = 0,
                            BaseDefense = 0,
                            BaseDodge = 0,
                            BaseHealth = 0,
                            BaseIntelligence = 0,
                            BaseIntuition = 0,
                            BaseLuck = 0,
                            BaseMana = 0,
                            BaseSpeed = 0,
                            BaseStrength = 0,
                            Description = "You honed your skills in navigating the city's hidden passages and bypassing its arcane security systems, often for personal gain or to \"liberate\" forgotten relics. You're nimble, resourceful, and have a knack for getting into places others can't. Your Resonance allows you to sense weak points in magical wards.",
                            Name = "Shadow Weasel",
                            StartingAbilities = "[]",
                            StartingEquipment = "[]"
                        },
                        new
                        {
                            Id = 11,
                            AvatarImageId = "",
                            BaseAgility = 0,
                            BaseCharisma = 0,
                            BaseDefense = 0,
                            BaseDodge = 0,
                            BaseHealth = 0,
                            BaseIntelligence = 0,
                            BaseIntuition = 0,
                            BaseLuck = 0,
                            BaseMana = 0,
                            BaseSpeed = 0,
                            BaseStrength = 0,
                            Description = "You're a natural showperson, using your innate Resonance to amplify your performances and evoke powerful emotions, or even minor magical effects, through music, voice, or art. You might be a budding synth-rock star, a captivating street magician, or a charismatic underground radio DJ. The Static Cascade causes strange feedback loops in magical sound/light.",
                            Name = "Aetheric Amplifier",
                            StartingAbilities = "[]",
                            StartingEquipment = "[]"
                        },
                        new
                        {
                            Id = 12,
                            AvatarImageId = "",
                            BaseAgility = 0,
                            BaseCharisma = 0,
                            BaseDefense = 0,
                            BaseDodge = 0,
                            BaseHealth = 0,
                            BaseIntelligence = 0,
                            BaseIntuition = 0,
                            BaseLuck = 0,
                            BaseMana = 0,
                            BaseSpeed = 0,
                            BaseStrength = 0,
                            Description = "You're a seasoned \"Mana-Runner\" (smuggler/courier) who operates on the fringes of the city's Magic-Theory regulations.You pilot a \"mana-fueled\" vehicle (think a classic 80s muscle car or a clunky, modified hover-van, powered by volatile alchemical mixtures) through dangerous, unpatrolled Aetheric zones, delivering illicit alchemical goods, sensitive data stored in memory crystals, or even \"off-grid\" passengers.You prioritize personal freedom and profit, but possess a surprising moral compass when truly tested.The Static Cascade is making your routes unpredictable and perilous.",
                            Name = "Mana-Runner",
                            StartingAbilities = "[]",
                            StartingEquipment = "[]"
                        },
                        new
                        {
                            Id = 13,
                            AvatarImageId = "",
                            BaseAgility = 0,
                            BaseCharisma = 0,
                            BaseDefense = 0,
                            BaseDodge = 0,
                            BaseHealth = 0,
                            BaseIntelligence = 0,
                            BaseIntuition = 0,
                            BaseLuck = 0,
                            BaseMana = 0,
                            BaseSpeed = 0,
                            BaseStrength = 0,
                            Description = "You're a charismatic socialite, entrepreneur, or \"fixer\" who understands the power of charm, influence, and shrewd deals in the city's intertwined magical and corporate circles.You manage (or used to manage) a high-end establishment – perhaps a magically-gambling den, an exclusive neon-lit club, or a black-market Aetheric trading post.You have a silver tongue and a knack for turning any situation to your advantage, often juggling multiple, sometimes conflicting, alliances.",
                            Name = "Aether-Baron",
                            StartingAbilities = "[]",
                            StartingEquipment = "[]"
                        },
                        new
                        {
                            Id = 14,
                            AvatarImageId = "",
                            BaseAgility = 0,
                            BaseCharisma = 0,
                            BaseDefense = 0,
                            BaseDodge = 0,
                            BaseHealth = 0,
                            BaseIntelligence = 0,
                            BaseIntuition = 0,
                            BaseLuck = 0,
                            BaseMana = 0,
                            BaseSpeed = 0,
                            BaseStrength = 0,
                            Description = "You were raised in relative obscurity, perhaps in a quiet, isolated corner of the city or even just outside it, seemingly disconnected from the grand Magic-Theory networks.However, you've always felt a strange pull, a deeper connection to the city's Aetheric currents than others.You possess an untapped potential for Arcane Resonance, destined for something greater than your humble beginnings.You are idealistic and driven by a desire to help, but naive about the city's true complexities.",
                            Name = "Resonance Prodigy",
                            StartingAbilities = "[]",
                            StartingEquipment = "[]"
                        });
                });

            modelBuilder.Entity("ProjectAether.Objects.Net._2._1.Standard.Models.GameObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GameObjectType")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ObjectType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrefabConfigData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrefabName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorldZoneId")
                        .HasColumnType("int");

                    b.Property<double>("xPosition")
                        .HasColumnType("float");

                    b.Property<double>("yPosition")
                        .HasColumnType("float");

                    b.Property<double>("zPosition")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("WorldZoneId");

                    b.ToTable("GameObjects");

                    b.HasDiscriminator<int>("GameObjectType").HasValue(0);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ProjectAether.Objects.Net._2._1.Standard.Models.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("ProjectAether.Objects.Net._2._1.Standard.Models.OnlineConnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("ConnectedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ConnectionId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("LastActivity")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("OnlineConnections");
                });

            modelBuilder.Entity("ProjectAether.Objects.Net._2._1.Standard.Models.PlayerProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("PlayerProfiles");
                });

            modelBuilder.Entity("ProjectAether.Objects.Net._2._1.Standard.Models.StoreItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isTaxed")
                        .HasColumnType("bit");

                    b.Property<int>("quantityAvailable")
                        .HasColumnType("int");

                    b.Property<double>("taxAmount")
                        .HasColumnType("float");

                    b.Property<double>("taxRate")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("StoreItems");
                });

            modelBuilder.Entity("ProjectAether.Objects.Net._2._1.Standard.Models.StoreTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("StoreTransactions");
                });

            modelBuilder.Entity("ProjectAether.Objects.Net._2._1.Standard.Models.StoreTransactionItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("StoreItemId")
                        .HasColumnType("int");

                    b.Property<int>("StoreTransactionId")
                        .HasColumnType("int");

                    b.Property<double>("TaxAmount")
                        .HasColumnType("float");

                    b.Property<double>("TaxRate")
                        .HasColumnType("float");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("StoreItemId");

                    b.HasIndex("StoreTransactionId");

                    b.ToTable("StoreTransactionItems");
                });

            modelBuilder.Entity("ProjectAether.Objects.Net._2._1.Standard.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ProjectAether.Objects.Net._2._1.Standard.Models.WorldZone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SceneName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerIPAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServerPort")
                        .HasColumnType("int");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("WorldZones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "The character's starting point",
                            Name = "Node Forge",
                            SceneName = "04_NodeForge_Intro",
                            ServerIPAddress = "192.168.1.147",
                            ServerPort = 55002,
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "The Forest Zone",
                            Name = "Forest Zone",
                            SceneName = "05_ForestZone",
                            ServerIPAddress = "192.168.1.147",
                            ServerPort = 55003,
                            ZoneId = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "The Dungeon Zone",
                            Name = "Dungeon Zone",
                            SceneName = "05_DungeonZone",
                            ServerIPAddress = "192.168.1.147",
                            ServerPort = 55004,
                            ZoneId = 3
                        },
                        new
                        {
                            Id = 4,
                            Description = "The Main City Zone",
                            Name = "Main City",
                            SceneName = "05_MainCityScene",
                            ServerIPAddress = "192.168.1.147",
                            ServerPort = 55005,
                            ZoneId = 4
                        });
                });

            modelBuilder.Entity("Project_Aether_Backend.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateRegistered")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ProjectAether.Objects.Net._2._1.Standard.Models.GameCharacter", b =>
                {
                    b.HasBaseType("ProjectAether.Objects.Net._2._1.Standard.Models.GameObject");

                    b.Property<long>("Experience")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<int>("Health")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(100);

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("Mana")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(50);

                    b.Property<int>("archetypeDefinitionId")
                        .HasColumnType("int");

                    b.HasIndex("InventoryId")
                        .IsUnique()
                        .HasFilter("[InventoryId] IS NOT NULL");

                    b.HasIndex("archetypeDefinitionId")
                        .IsUnique()
                        .HasFilter("[archetypeDefinitionId] IS NOT NULL");

                    b.ToTable("GameObjects", t =>
                        {
                            t.Property("InventoryId")
                                .HasColumnName("GameCharacter_InventoryId");
                        });

                    b.HasDiscriminator().HasValue(9);
                });

            modelBuilder.Entity("ProjectAether.Objects.Net._2._1.Standard.Models.GameContainer", b =>
                {
                    b.HasBaseType("ProjectAether.Objects.Net._2._1.Standard.Models.GameObject");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.HasIndex("InventoryId")
                        .IsUnique()
                        .HasFilter("[InventoryId] IS NOT NULL");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("ProjectAether.Objects.Net._2._1.Standard.Models.InventoryItem", b =>
                {
                    b.HasBaseType("ProjectAether.Objects.Net._2._1.Standard.Models.GameObject");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsStackable")
                        .HasColumnType("bit");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasIndex("InventoryId");

                    b.ToTable("GameObjects", t =>
                        {
                            t.Property("InventoryId")
                                .HasColumnName("InventoryItem_InventoryId");
                        });

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("ProjectAether.Objects.Net._2._1.Standard.Models.NonPlayerCharacter", b =>
                {
                    b.HasBaseType("ProjectAether.Objects.Net._2._1.Standard.Models.GameCharacter");

                    b.ToTable("GameObjects", t =>
                        {
                            t.Property("InventoryId")
                                .HasColumnName("GameCharacter_InventoryId");
                        });

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("ProjectAether.Objects.Net._2._1.Standard.Models.PlayerCharacter", b =>
                {
                    b.HasBaseType("ProjectAether.Objects.Net._2._1.Standard.Models.GameCharacter");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PlayerProfileId")
                        .HasColumnType("int");

                    b.Property<string>("profilePictureId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("PlayerProfileId");

                    b.ToTable("GameObjects", t =>
                        {
                            t.Property("InventoryId")
                                .HasColumnName("GameCharacter_InventoryId");
                        });

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Project_Aether_Backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Project_Aether_Backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project_Aether_Backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Project_Aether_Backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectAether.Objects.Net._2._1.Standard.Models.ArchetypeDefinition", b =>
                {
                    b.HasOne("ProjectAether.Objects.Net._2._1.Standard.Models.StoreItem", "StoreItem")
                        .WithOne()
                        .HasForeignKey("ProjectAether.Objects.Net._2._1.Standard.Models.ArchetypeDefinition", "StoreItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("StoreItem");
                });

            modelBuilder.Entity("ProjectAether.Objects.Net._2._1.Standard.Models.GameObject", b =>
                {
                    b.HasOne("ProjectAether.Objects.Net._2._1.Standard.Models.WorldZone", "WorldZone")
                        .WithMany("GameObjects")
                        .HasForeignKey("WorldZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WorldZone");
                });

            modelBuilder.Entity("ProjectAether.Objects.Net._2._1.Standard.Models.OnlineConnection", b =>
                {
                    b.HasOne("Project_Aether_Backend.Models.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("ProjectAether.Objects.Net._2._1.Standard.Models.OnlineConnection", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectAether.Objects.Net._2._1.Standard.Models.PlayerProfile", b =>
                {
                    b.HasOne("Project_Aether_Backend.Models.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("ProjectAether.Objects.Net._2._1.Standard.Models.PlayerProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectAether.Objects.Net._2._1.Standard.Models.StoreTransaction", b =>
                {
                    b.HasOne("Project_Aether_Backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectAether.Objects.Net._2._1.Standard.Models.StoreTransactionItem", b =>
                {
                    b.HasOne("ProjectAether.Objects.Net._2._1.Standard.Models.StoreItem", "StoreItem")
                        .WithMany()
                        .HasForeignKey("StoreItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectAether.Objects.Net._2._1.Standard.Models.StoreTransaction", "StoreTransaction")
                        .WithMany()
                        .HasForeignKey("StoreTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreItem");

                    b.Navigation("StoreTransaction");
                });

            modelBuilder.Entity("ProjectAether.Objects.Net._2._1.Standard.Models.GameCharacter", b =>
                {
                    b.HasOne("ProjectAether.Objects.Net._2._1.Standard.Models.Inventory", "Inventory")
                        .WithOne()
                        .HasForeignKey("ProjectAether.Objects.Net._2._1.Standard.Models.GameCharacter", "InventoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectAether.Objects.Net._2._1.Standard.Models.ArchetypeDefinition", "ArchetypeDefinition")
                        .WithOne()
                        .HasForeignKey("ProjectAether.Objects.Net._2._1.Standard.Models.GameCharacter", "archetypeDefinitionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ArchetypeDefinition");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("ProjectAether.Objects.Net._2._1.Standard.Models.GameContainer", b =>
                {
                    b.HasOne("ProjectAether.Objects.Net._2._1.Standard.Models.Inventory", "Inventory")
                        .WithOne()
                        .HasForeignKey("ProjectAether.Objects.Net._2._1.Standard.Models.GameContainer", "InventoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("ProjectAether.Objects.Net._2._1.Standard.Models.InventoryItem", b =>
                {
                    b.HasOne("ProjectAether.Objects.Net._2._1.Standard.Models.Inventory", "Inventory")
                        .WithMany("Items")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("ProjectAether.Objects.Net._2._1.Standard.Models.PlayerCharacter", b =>
                {
                    b.HasOne("ProjectAether.Objects.Net._2._1.Standard.Models.PlayerProfile", "Player")
                        .WithMany("Characters")
                        .HasForeignKey("PlayerProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("ProjectAether.Objects.Net._2._1.Standard.Models.Inventory", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("ProjectAether.Objects.Net._2._1.Standard.Models.PlayerProfile", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("ProjectAether.Objects.Net._2._1.Standard.Models.WorldZone", b =>
                {
                    b.Navigation("GameObjects");
                });
#pragma warning restore 612, 618
        }
    }
}
